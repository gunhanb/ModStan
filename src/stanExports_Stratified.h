// Generated by rstantools.  Do not edit by hand.

/*
    ModStan is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    ModStan is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with ModStan.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1
#include <stan/model/model_header.hpp>
namespace model_Stratified_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_Stratified");
    reader.add_event(102, 100, "end", "model_Stratified");
    return reader;
}
#include <stan_meta_header.hpp>
class model_Stratified : public prob_grad {
private:
        int N_obs;
        int N_schedule;
        int N_pred;
        std::vector<double> resp;
        std::vector<double> dose;
        double maxdose;
        std::vector<int> schedule;
        std::vector<double> Pred_doses;
        double prior_stdev_theta_0;
        double prior_stdev_theta_1;
        double prior_stdev_sigma;
public:
    model_Stratified(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_Stratified(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_Stratified_namespace::model_Stratified";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "N_obs", "int", context__.to_vec());
            N_obs = int(0);
            vals_i__ = context__.vals_i("N_obs");
            pos__ = 0;
            N_obs = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_obs", N_obs, 1);
            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "N_schedule", "int", context__.to_vec());
            N_schedule = int(0);
            vals_i__ = context__.vals_i("N_schedule");
            pos__ = 0;
            N_schedule = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_schedule", N_schedule, 1);
            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "N_pred", "int", context__.to_vec());
            N_pred = int(0);
            vals_i__ = context__.vals_i("N_pred");
            pos__ = 0;
            N_pred = vals_i__[pos__++];
            check_greater_or_equal(function__, "N_pred", N_pred, 1);
            current_statement_begin__ = 15;
            validate_non_negative_index("resp", "N_obs", N_obs);
            context__.validate_dims("data initialization", "resp", "double", context__.to_vec(N_obs));
            resp = std::vector<double>(N_obs, double(0));
            vals_r__ = context__.vals_r("resp");
            pos__ = 0;
            size_t resp_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < resp_k_0_max__; ++k_0__) {
                resp[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 16;
            validate_non_negative_index("dose", "N_obs", N_obs);
            context__.validate_dims("data initialization", "dose", "double", context__.to_vec(N_obs));
            dose = std::vector<double>(N_obs, double(0));
            vals_r__ = context__.vals_r("dose");
            pos__ = 0;
            size_t dose_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < dose_k_0_max__; ++k_0__) {
                dose[k_0__] = vals_r__[pos__++];
            }
            size_t dose_i_0_max__ = N_obs;
            for (size_t i_0__ = 0; i_0__ < dose_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "dose[i_0__]", dose[i_0__], 0);
            }
            current_statement_begin__ = 17;
            context__.validate_dims("data initialization", "maxdose", "double", context__.to_vec());
            maxdose = double(0);
            vals_r__ = context__.vals_r("maxdose");
            pos__ = 0;
            maxdose = vals_r__[pos__++];
            check_greater_or_equal(function__, "maxdose", maxdose, 0);
            current_statement_begin__ = 18;
            validate_non_negative_index("schedule", "N_obs", N_obs);
            context__.validate_dims("data initialization", "schedule", "int", context__.to_vec(N_obs));
            schedule = std::vector<int>(N_obs, int(0));
            vals_i__ = context__.vals_i("schedule");
            pos__ = 0;
            size_t schedule_k_0_max__ = N_obs;
            for (size_t k_0__ = 0; k_0__ < schedule_k_0_max__; ++k_0__) {
                schedule[k_0__] = vals_i__[pos__++];
            }
            current_statement_begin__ = 19;
            validate_non_negative_index("Pred_doses", "N_pred", N_pred);
            context__.validate_dims("data initialization", "Pred_doses", "double", context__.to_vec(N_pred));
            Pred_doses = std::vector<double>(N_pred, double(0));
            vals_r__ = context__.vals_r("Pred_doses");
            pos__ = 0;
            size_t Pred_doses_k_0_max__ = N_pred;
            for (size_t k_0__ = 0; k_0__ < Pred_doses_k_0_max__; ++k_0__) {
                Pred_doses[k_0__] = vals_r__[pos__++];
            }
            current_statement_begin__ = 20;
            context__.validate_dims("data initialization", "prior_stdev_theta_0", "double", context__.to_vec());
            prior_stdev_theta_0 = double(0);
            vals_r__ = context__.vals_r("prior_stdev_theta_0");
            pos__ = 0;
            prior_stdev_theta_0 = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_stdev_theta_0", prior_stdev_theta_0, 0);
            current_statement_begin__ = 21;
            context__.validate_dims("data initialization", "prior_stdev_theta_1", "double", context__.to_vec());
            prior_stdev_theta_1 = double(0);
            vals_r__ = context__.vals_r("prior_stdev_theta_1");
            pos__ = 0;
            prior_stdev_theta_1 = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_stdev_theta_1", prior_stdev_theta_1, 0);
            current_statement_begin__ = 22;
            context__.validate_dims("data initialization", "prior_stdev_sigma", "double", context__.to_vec());
            prior_stdev_sigma = double(0);
            vals_r__ = context__.vals_r("prior_stdev_sigma");
            pos__ = 0;
            prior_stdev_sigma = vals_r__[pos__++];
            check_greater_or_equal(function__, "prior_stdev_sigma", prior_stdev_sigma, 0);
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 26;
            num_params_r__ += 1;
            current_statement_begin__ = 27;
            num_params_r__ += 1;
            current_statement_begin__ = 28;
            validate_non_negative_index("theta_2_raw", "N_schedule", N_schedule);
            num_params_r__ += (1 * N_schedule);
            current_statement_begin__ = 29;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_Stratified() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 26;
        if (!(context__.contains_r("theta_0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_0", "double", context__.to_vec());
        double theta_0(0);
        theta_0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_0: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 27;
        if (!(context__.contains_r("theta_1")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_1 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_1");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "theta_1", "double", context__.to_vec());
        double theta_1(0);
        theta_1 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(theta_1);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_1: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 28;
        if (!(context__.contains_r("theta_2_raw")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable theta_2_raw missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("theta_2_raw");
        pos__ = 0U;
        validate_non_negative_index("theta_2_raw", "N_schedule", N_schedule);
        context__.validate_dims("parameter initialization", "theta_2_raw", "double", context__.to_vec(N_schedule));
        std::vector<double> theta_2_raw(N_schedule, double(0));
        size_t theta_2_raw_k_0_max__ = N_schedule;
        for (size_t k_0__ = 0; k_0__ < theta_2_raw_k_0_max__; ++k_0__) {
            theta_2_raw[k_0__] = vals_r__[pos__++];
        }
        size_t theta_2_raw_i_0_max__ = N_schedule;
        for (size_t i_0__ = 0; i_0__ < theta_2_raw_i_0_max__; ++i_0__) {
            try {
                writer__.scalar_lub_unconstrain(0, 1.5, theta_2_raw[i_0__]);
            } catch (const std::exception& e) {
                stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable theta_2_raw: ") + e.what()), current_statement_begin__, prog_reader__());
            }
        }
        current_statement_begin__ = 29;
        if (!(context__.contains_r("sigma")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma", "double", context__.to_vec());
        double sigma(0);
        sigma = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, sigma);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 26;
            local_scalar_t__ theta_0;
            (void) theta_0;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_0 = in__.scalar_constrain(lp__);
            else
                theta_0 = in__.scalar_constrain();
            current_statement_begin__ = 27;
            local_scalar_t__ theta_1;
            (void) theta_1;  // dummy to suppress unused var warning
            if (jacobian__)
                theta_1 = in__.scalar_constrain(lp__);
            else
                theta_1 = in__.scalar_constrain();
            current_statement_begin__ = 28;
            std::vector<local_scalar_t__> theta_2_raw;
            size_t theta_2_raw_d_0_max__ = N_schedule;
            theta_2_raw.reserve(theta_2_raw_d_0_max__);
            for (size_t d_0__ = 0; d_0__ < theta_2_raw_d_0_max__; ++d_0__) {
                if (jacobian__)
                    theta_2_raw.push_back(in__.scalar_lub_constrain(0, 1.5, lp__));
                else
                    theta_2_raw.push_back(in__.scalar_lub_constrain(0, 1.5));
            }
            current_statement_begin__ = 29;
            local_scalar_t__ sigma;
            (void) sigma;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma = in__.scalar_lb_constrain(0, lp__);
            else
                sigma = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 33;
            validate_non_negative_index("resp_hat", "N_obs", N_obs);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> resp_hat(N_obs);
            stan::math::initialize(resp_hat, DUMMY_VAR__);
            stan::math::fill(resp_hat, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("theta_2", "N_schedule", N_schedule);
            std::vector<local_scalar_t__> theta_2(N_schedule, local_scalar_t__(0));
            stan::math::initialize(theta_2, DUMMY_VAR__);
            stan::math::fill(theta_2, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 37;
            for (int i = 1; i <= N_schedule; ++i) {
                current_statement_begin__ = 38;
                stan::model::assign(theta_2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (maxdose * get_base1(theta_2_raw, i, "theta_2_raw", 1)), 
                            "assigning variable theta_2");
            }
            current_statement_begin__ = 41;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 42;
                stan::model::assign(resp_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (theta_0 + ((theta_1 * get_base1(dose, i, "dose", 1)) / (get_base1(theta_2, get_base1(schedule, i, "schedule", 1), "theta_2", 1) + get_base1(dose, i, "dose", 1)))), 
                            "assigning variable resp_hat");
            }
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 33;
            size_t resp_hat_j_1_max__ = N_obs;
            for (size_t j_1__ = 0; j_1__ < resp_hat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(resp_hat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: resp_hat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable resp_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 34;
            size_t theta_2_k_0_max__ = N_schedule;
            for (size_t k_0__ = 0; k_0__ < theta_2_k_0_max__; ++k_0__) {
                if (stan::math::is_uninitialized(theta_2[k_0__])) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: theta_2" << "[" << k_0__ << "]";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable theta_2: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            size_t theta_2_i_0_max__ = N_schedule;
            for (size_t i_0__ = 0; i_0__ < theta_2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "theta_2[i_0__]", theta_2[i_0__], 0);
            }
            // model body
            current_statement_begin__ = 48;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 49;
                lp_accum__.add(normal_log<propto__>(get_base1(resp, i, "resp", 1), get_base1(resp_hat, i, "resp_hat", 1), sigma));
            }
            current_statement_begin__ = 52;
            lp_accum__.add(normal_log<propto__>(sigma, 0, prior_stdev_sigma));
            current_statement_begin__ = 53;
            lp_accum__.add(normal_log<propto__>(theta_0, 0, prior_stdev_theta_0));
            current_statement_begin__ = 54;
            lp_accum__.add(normal_log<propto__>(theta_1, 0, prior_stdev_theta_1));
            current_statement_begin__ = 56;
            lp_accum__.add(lognormal_log<propto__>(theta_2_raw, -(2.5), 1.8));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("theta_0");
        names__.push_back("theta_1");
        names__.push_back("theta_2_raw");
        names__.push_back("sigma");
        names__.push_back("resp_hat");
        names__.push_back("theta_2");
        names__.push_back("resp_pred_mean");
        names__.push_back("resp_pred");
        names__.push_back("resp_rep_mean");
        names__.push_back("resp_rep");
        names__.push_back("log_lik");
        names__.push_back("theta_2_prior_raw");
        names__.push_back("theta_2_prior");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_schedule);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_schedule);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pred);
        dims__.push_back(N_schedule);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_pred);
        dims__.push_back(N_schedule);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_obs);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_schedule);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_Stratified_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        double theta_0 = in__.scalar_constrain();
        vars__.push_back(theta_0);
        double theta_1 = in__.scalar_constrain();
        vars__.push_back(theta_1);
        std::vector<double> theta_2_raw;
        size_t theta_2_raw_d_0_max__ = N_schedule;
        theta_2_raw.reserve(theta_2_raw_d_0_max__);
        for (size_t d_0__ = 0; d_0__ < theta_2_raw_d_0_max__; ++d_0__) {
            theta_2_raw.push_back(in__.scalar_lub_constrain(0, 1.5));
        }
        size_t theta_2_raw_k_0_max__ = N_schedule;
        for (size_t k_0__ = 0; k_0__ < theta_2_raw_k_0_max__; ++k_0__) {
            vars__.push_back(theta_2_raw[k_0__]);
        }
        double sigma = in__.scalar_lb_constrain(0);
        vars__.push_back(sigma);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 33;
            validate_non_negative_index("resp_hat", "N_obs", N_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> resp_hat(N_obs);
            stan::math::initialize(resp_hat, DUMMY_VAR__);
            stan::math::fill(resp_hat, DUMMY_VAR__);
            current_statement_begin__ = 34;
            validate_non_negative_index("theta_2", "N_schedule", N_schedule);
            std::vector<double> theta_2(N_schedule, double(0));
            stan::math::initialize(theta_2, DUMMY_VAR__);
            stan::math::fill(theta_2, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 37;
            for (int i = 1; i <= N_schedule; ++i) {
                current_statement_begin__ = 38;
                stan::model::assign(theta_2, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (maxdose * get_base1(theta_2_raw, i, "theta_2_raw", 1)), 
                            "assigning variable theta_2");
            }
            current_statement_begin__ = 41;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 42;
                stan::model::assign(resp_hat, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (theta_0 + ((theta_1 * get_base1(dose, i, "dose", 1)) / (get_base1(theta_2, get_base1(schedule, i, "schedule", 1), "theta_2", 1) + get_base1(dose, i, "dose", 1)))), 
                            "assigning variable resp_hat");
            }
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 34;
            size_t theta_2_i_0_max__ = N_schedule;
            for (size_t i_0__ = 0; i_0__ < theta_2_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "theta_2[i_0__]", theta_2[i_0__], 0);
            }
            // write transformed parameters
            if (include_tparams__) {
                size_t resp_hat_j_1_max__ = N_obs;
                for (size_t j_1__ = 0; j_1__ < resp_hat_j_1_max__; ++j_1__) {
                    vars__.push_back(resp_hat(j_1__));
                }
                size_t theta_2_k_0_max__ = N_schedule;
                for (size_t k_0__ = 0; k_0__ < theta_2_k_0_max__; ++k_0__) {
                    vars__.push_back(theta_2[k_0__]);
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 61;
            validate_non_negative_index("resp_pred_mean", "N_pred", N_pred);
            validate_non_negative_index("resp_pred_mean", "N_schedule", N_schedule);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> resp_pred_mean(N_pred, N_schedule);
            stan::math::initialize(resp_pred_mean, DUMMY_VAR__);
            stan::math::fill(resp_pred_mean, DUMMY_VAR__);
            current_statement_begin__ = 62;
            validate_non_negative_index("resp_pred", "N_schedule", N_schedule);
            validate_non_negative_index("resp_pred", "N_pred", N_pred);
            std::vector<Eigen::Matrix<double, Eigen::Dynamic, 1> > resp_pred(N_pred, Eigen::Matrix<double, Eigen::Dynamic, 1>(N_schedule));
            stan::math::initialize(resp_pred, DUMMY_VAR__);
            stan::math::fill(resp_pred, DUMMY_VAR__);
            current_statement_begin__ = 64;
            validate_non_negative_index("resp_rep_mean", "N_obs", N_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> resp_rep_mean(N_obs);
            stan::math::initialize(resp_rep_mean, DUMMY_VAR__);
            stan::math::fill(resp_rep_mean, DUMMY_VAR__);
            current_statement_begin__ = 65;
            validate_non_negative_index("resp_rep", "N_obs", N_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> resp_rep(N_obs);
            stan::math::initialize(resp_rep, DUMMY_VAR__);
            stan::math::fill(resp_rep, DUMMY_VAR__);
            current_statement_begin__ = 67;
            validate_non_negative_index("log_lik", "N_obs", N_obs);
            Eigen::Matrix<double, Eigen::Dynamic, 1> log_lik(N_obs);
            stan::math::initialize(log_lik, DUMMY_VAR__);
            stan::math::fill(log_lik, DUMMY_VAR__);
            current_statement_begin__ = 68;
            double theta_2_prior_raw;
            (void) theta_2_prior_raw;  // dummy to suppress unused var warning
            stan::math::initialize(theta_2_prior_raw, DUMMY_VAR__);
            stan::math::fill(theta_2_prior_raw, DUMMY_VAR__);
            current_statement_begin__ = 69;
            validate_non_negative_index("theta_2_prior", "N_schedule", N_schedule);
            std::vector<double> theta_2_prior(N_schedule, double(0));
            stan::math::initialize(theta_2_prior, DUMMY_VAR__);
            stan::math::fill(theta_2_prior, DUMMY_VAR__);
            // generated quantities statements
            current_statement_begin__ = 73;
            for (int i = 1; i <= N_pred; ++i) {
                current_statement_begin__ = 74;
                for (int j = 1; j <= N_schedule; ++j) {
                    current_statement_begin__ = 75;
                    stan::model::assign(resp_pred_mean, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                (theta_0 + ((theta_1 * get_base1(Pred_doses, i, "Pred_doses", 1)) / (get_base1(theta_2, j, "theta_2", 1) + get_base1(Pred_doses, i, "Pred_doses", 1)))), 
                                "assigning variable resp_pred_mean");
                    current_statement_begin__ = 76;
                    stan::model::assign(resp_pred, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                normal_rng(get_base1(resp_pred_mean, i, j, "resp_pred_mean", 1), sigma, base_rng__), 
                                "assigning variable resp_pred");
                }
            }
            current_statement_begin__ = 81;
            stan::math::assign(theta_2_prior_raw, lognormal_rng(-(2.5), 1.8, base_rng__));
            current_statement_begin__ = 82;
            stan::model::assign(theta_2_prior, 
                        stan::model::cons_list(stan::model::index_uni(2), stan::model::nil_index_list()), 
                        (theta_2_prior_raw * maxdose), 
                        "assigning variable theta_2_prior");
            current_statement_begin__ = 83;
            stan::model::assign(theta_2_prior, 
                        stan::model::cons_list(stan::model::index_uni(1), stan::model::nil_index_list()), 
                        (get_base1(theta_2_prior, 2, "theta_2_prior", 1) / 2), 
                        "assigning variable theta_2_prior");
            current_statement_begin__ = 84;
            stan::model::assign(theta_2_prior, 
                        stan::model::cons_list(stan::model::index_uni(3), stan::model::nil_index_list()), 
                        (get_base1(theta_2_prior, 2, "theta_2_prior", 1) * 2), 
                        "assigning variable theta_2_prior");
            current_statement_begin__ = 88;
            for (int i = 1; i <= N_obs; ++i) {
                current_statement_begin__ = 89;
                stan::model::assign(resp_rep_mean, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (theta_0 + ((theta_1 * get_base1(dose, i, "dose", 1)) / (get_base1(theta_2, get_base1(schedule, i, "schedule", 1), "theta_2", 1) + get_base1(dose, i, "dose", 1)))), 
                            "assigning variable resp_rep_mean");
                current_statement_begin__ = 90;
                stan::model::assign(resp_rep, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            normal_rng(get_base1(resp_rep_mean, i, "resp_rep_mean", 1), sigma, base_rng__), 
                            "assigning variable resp_rep");
            }
            current_statement_begin__ = 95;
            for (int n = 1; n <= N_obs; ++n) {
                current_statement_begin__ = 96;
                stan::model::assign(log_lik, 
                            stan::model::cons_list(stan::model::index_uni(n), stan::model::nil_index_list()), 
                            normal_log(get_base1(resp, n, "resp", 1), get_base1(resp_hat, n, "resp_hat", 1), sigma), 
                            "assigning variable log_lik");
            }
            // validate, write generated quantities
            current_statement_begin__ = 61;
            size_t resp_pred_mean_j_2_max__ = N_schedule;
            size_t resp_pred_mean_j_1_max__ = N_pred;
            for (size_t j_2__ = 0; j_2__ < resp_pred_mean_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < resp_pred_mean_j_1_max__; ++j_1__) {
                    vars__.push_back(resp_pred_mean(j_1__, j_2__));
                }
            }
            current_statement_begin__ = 62;
            size_t resp_pred_j_1_max__ = N_schedule;
            size_t resp_pred_k_0_max__ = N_pred;
            for (size_t j_1__ = 0; j_1__ < resp_pred_j_1_max__; ++j_1__) {
                for (size_t k_0__ = 0; k_0__ < resp_pred_k_0_max__; ++k_0__) {
                    vars__.push_back(resp_pred[k_0__](j_1__));
                }
            }
            current_statement_begin__ = 64;
            size_t resp_rep_mean_j_1_max__ = N_obs;
            for (size_t j_1__ = 0; j_1__ < resp_rep_mean_j_1_max__; ++j_1__) {
                vars__.push_back(resp_rep_mean(j_1__));
            }
            current_statement_begin__ = 65;
            size_t resp_rep_j_1_max__ = N_obs;
            for (size_t j_1__ = 0; j_1__ < resp_rep_j_1_max__; ++j_1__) {
                vars__.push_back(resp_rep(j_1__));
            }
            current_statement_begin__ = 67;
            size_t log_lik_j_1_max__ = N_obs;
            for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
                vars__.push_back(log_lik(j_1__));
            }
            current_statement_begin__ = 68;
            vars__.push_back(theta_2_prior_raw);
            current_statement_begin__ = 69;
            size_t theta_2_prior_i_0_max__ = N_schedule;
            for (size_t i_0__ = 0; i_0__ < theta_2_prior_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "theta_2_prior[i_0__]", theta_2_prior[i_0__], 0);
            }
            size_t theta_2_prior_k_0_max__ = N_schedule;
            for (size_t k_0__ = 0; k_0__ < theta_2_prior_k_0_max__; ++k_0__) {
                vars__.push_back(theta_2_prior[k_0__]);
            }
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    static std::string model_name() {
        return "model_Stratified";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_1";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_2_raw_k_0_max__ = N_schedule;
        for (size_t k_0__ = 0; k_0__ < theta_2_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_2_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t resp_hat_j_1_max__ = N_obs;
            for (size_t j_1__ = 0; j_1__ < resp_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resp_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_2_k_0_max__ = N_schedule;
            for (size_t k_0__ = 0; k_0__ < theta_2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_2" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t resp_pred_mean_j_2_max__ = N_schedule;
        size_t resp_pred_mean_j_1_max__ = N_pred;
        for (size_t j_2__ = 0; j_2__ < resp_pred_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < resp_pred_mean_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resp_pred_mean" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t resp_pred_j_1_max__ = N_schedule;
        size_t resp_pred_k_0_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < resp_pred_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < resp_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resp_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t resp_rep_mean_j_1_max__ = N_obs;
        for (size_t j_1__ = 0; j_1__ < resp_rep_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "resp_rep_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t resp_rep_j_1_max__ = N_obs;
        for (size_t j_1__ = 0; j_1__ < resp_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "resp_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N_obs;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_2_prior_raw";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_2_prior_k_0_max__ = N_schedule;
        for (size_t k_0__ = 0; k_0__ < theta_2_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_2_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_0";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_1";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_2_raw_k_0_max__ = N_schedule;
        for (size_t k_0__ = 0; k_0__ < theta_2_raw_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_2_raw" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t resp_hat_j_1_max__ = N_obs;
            for (size_t j_1__ = 0; j_1__ < resp_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resp_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t theta_2_k_0_max__ = N_schedule;
            for (size_t k_0__ = 0; k_0__ < theta_2_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "theta_2" << '.' << k_0__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
        size_t resp_pred_mean_j_2_max__ = N_schedule;
        size_t resp_pred_mean_j_1_max__ = N_pred;
        for (size_t j_2__ = 0; j_2__ < resp_pred_mean_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < resp_pred_mean_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resp_pred_mean" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t resp_pred_j_1_max__ = N_schedule;
        size_t resp_pred_k_0_max__ = N_pred;
        for (size_t j_1__ = 0; j_1__ < resp_pred_j_1_max__; ++j_1__) {
            for (size_t k_0__ = 0; k_0__ < resp_pred_k_0_max__; ++k_0__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "resp_pred" << '.' << k_0__ + 1 << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t resp_rep_mean_j_1_max__ = N_obs;
        for (size_t j_1__ = 0; j_1__ < resp_rep_mean_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "resp_rep_mean" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t resp_rep_j_1_max__ = N_obs;
        for (size_t j_1__ = 0; j_1__ < resp_rep_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "resp_rep" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t log_lik_j_1_max__ = N_obs;
        for (size_t j_1__ = 0; j_1__ < log_lik_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "theta_2_prior_raw";
        param_names__.push_back(param_name_stream__.str());
        size_t theta_2_prior_k_0_max__ = N_schedule;
        for (size_t k_0__ = 0; k_0__ < theta_2_prior_k_0_max__; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "theta_2_prior" << '.' << k_0__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }
}; // model
}  // namespace
typedef model_Stratified_namespace::model_Stratified stan_model;
#endif
